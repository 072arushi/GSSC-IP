14 october'21

Ans 1
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int rootIdx = 0;
        return build(preorder, inorder, rootIdx, 0, inorder.size()-1);
    }
    TreeNode* build(vector<int>& preorder, vector<int>& inorder, int& rootIdx, int left, int right) {
        if (left > right) return NULL;
        int pivot = left;  // find the root from inorder
        while(inorder[pivot] != preorder[rootIdx]) pivot++;
        rootIdx++;
        TreeNode* newNode = new TreeNode(inorder[pivot]);
        newNode->left = build(preorder, inorder, rootIdx, left, pivot-1);
        newNode->right = build(preorder, inorder, rootIdx, pivot+1, right);
        return newNode;
    }
};

Ans 2
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        return bld(inorder,postorder,0,inorder.size()-1,0,postorder.size()-1);
    }
    TreeNode* bld(vector<int>&inorder, vector<int>&postorder, int istart, int iend,
                  int pstart,int pend){
        if(istart > iend || pstart > pend)
            return NULL;
        int val = postorder[pend];   
        int i = istart;
        while(inorder[i] != val) i++;
        TreeNode* root = new TreeNode(val);
        root->left = bld(inorder, postorder, istart, i-1, pstart, pstart+i-istart-1);
        root->right = bld(inorder, postorder, i+1, iend, pend-(iend-i), pend-1);
        return root;
    }
};

Ans 3
class Solution {
public:
    void rec(TreeNode* root, int level) {
        if (!root) return;
        res[depth - level - 1].push_back(root->val);
        rec(root->left, level+1);
        rec(root->right, level+1);
    }
    int getDepth(TreeNode* root) {
        if (!root) return 0;
        return max(getDepth(root->left), getDepth(root->right)) + 1;
    }
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        depth = getDepth(root);
        res.assign(depth, {});
        rec(root, 0);
        return res;
    }
private:
    vector<vector<int>> res;
    int depth;
};
