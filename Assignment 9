9 October'21
Ans 2
int countDays(vector<int>& ws, int tot_cap, int cur_cap = 0, int res = 1) {
  for (auto w : ws) {
    cur_cap += w;
    if (cur_cap > tot_cap) ++res, cur_cap = w;
  }
  return res;
}
int shipWithinDays(vector<int>& ws, int D) {
  auto r = accumulate(begin(ws), end(ws), 0);
  auto l = max(r / D, *max_element(begin(ws), end(ws)));
  while (l < r) {
    auto m = (l + r) / 2;
    if (countDays(ws, m) <= D) r = m;
    else l = m + 1;
  }
  return l;
}

Ans 3
class Solution {
public:
    int splitArray(vector<int>& nums, int m) {
        int n = nums.size();
        vector<unsigned int> prefix_sum(n, 0);
        vector<vector<unsigned int> > dp(n + 1, vector<unsigned int>(m + 1, INT_MAX));
        prefix_sum[0] = nums[0];
        for(int i = 1; i < n; i++){
            prefix_sum[i] = prefix_sum[i - 1] + nums[i];
        }        
        for(int i = 0; i < n; i++){
            dp[i][1] = prefix_sum[i];
        }    
        dp[0][0] = 0;
        for(int i = 0; i < n; i++){         
            for(int j = 2; j <= m; j++){               
                for(int k = 0; k < i; k++){
                    dp[i][j] = min(dp[i][j], max(dp[k][j - 1], prefix_sum[i] - prefix_sum[k]));
                }
            }
        }
        return dp[n - 1][m];
    }
};
