16 October'21

Ans 1
class Solution {
public:
    void recursion(TreeNode *root, int level, vector<int> &res)
    {
        if(root==NULL) return ;
        if(res.size()<level) res.push_back(root->val);
        recursion(root->right, level+1, res);
        recursion(root->left, level+1, res);
    }
    
    vector<int> rightSideView(TreeNode *root) {
        vector<int> res;
        recursion(root, 1, res);
        return res;
    }
};

Ans 2
class Solution {
public:
    
    void inorder(TreeNode* node)
    {
        if(!node)
            return;
        inorder(node -> left);
        vec.push_back(node -> val);
        inorder(node -> right);
    }
    
    bool findTarget(TreeNode* root, int k) {
        if(!root)
            return false;
        inorder(root);
        int i = 0, j = vec.size()-1;
        while(i < j)
        {
            int sum = vec[i]+vec[j];
            if(sum == k)
                return true;
            else if(sum < k)
                i++;
            else
                j--;
        }
        return false;
    }
    
private:
    vector<int> vec;
};
